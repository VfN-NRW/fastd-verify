#!/usr/bin/env python3
#
#  fastdVerify.py 0.1
#
#  Copyright 2015 Felix Kaechele <felix@freifunk-leverkusen.de>
#  Copyright 2015 RubenKelevra   <ruben@freifunk-leverkusen.de>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#

from argparse import ArgumentParser
from configparser import ConfigParser
from logging import WARNING, debug, getLogger, info
from logging.config import fileConfig
from os import environ, kill, path
from re import match as rematch
from signal import SIGHUP
from sys import exit as sys_exit

import requests

config = ConfigParser()


def get_hwid_from_key(key):
	"""Get hwid for fastd peer with given public key

	Keyword arguments:
	:param key: - public fastd key of peer
	"""
	api_endpoint = config['default']['peerNameEndpoint']

	r = requests.get(api_endpoint.format(key))
	obj = r.json()
	# Validate hwid (12 char, hexadecimal)
	if rematch("[0-9a-z]{12}$", obj):
		debug("API Request getHwidFromKey took %s" % r.elapsed)
		return obj
	else:
		raise Exception("hwid %s is invalid" % obj)


def get_instance_from_key(key):
	"""Get fastd instance name for fastd peer with given public key

	Keyword arguments:
	:param key: public fastd key of peer
	"""
	api_endpoint = config['default']['instanceNameEndpoint']

	r = requests.get(api_endpoint.format(key))
	obj = r.json()

	debug("API Request getInstanceFromKey took %s" % r.elapsed)
	return obj


def verify(key):
	"""Verify if a fastd peer is activated

	Keyword arguments:
	:param key: public fastd key of peer
	"""
	api_endpoint = config['default']['verificationEndpoint']

	r = requests.get(api_endpoint.format(key))
	obj = r.json()

	debug("API Request verify took %s" % r.elapsed)
	if obj is True:
		info(
			"Successfully verified unknown fastd peer with key %s" % key)
		return True
	else:
		info("Failed to verify unknown fastd peer with key %s" % key)
		return False


def create_peerfile(key):
	"""Create a static peer file for fastd peer with given key

	Keyword arguments:
	:param key: public fastd key of peer
	"""
	hwid = get_hwid_from_key(key)
	instance = get_instance_from_key(key)

	# build the path for the peer file from the template string
	peerfile_path = config['default'][
		'peerfilePathTemplate'].format(instance, hwid)

	info(
		"Creating peer file for fast peer with key %s in %s" % (key, peerfile_path))
	f = open(peerfile_path, "w")
	f.write(config['default']['peerfileTemplate'].format(key))
	f.close()

	# rehash peer files for calling fastd instance
	# but only if we are called by fastd
	fastd_pid = int(environ.get('FASTD_PID'))
	if fastd_pid is not None:
		debug("Sending SIGHUP to fastd (%s)" % fastd_pid)
		kill(fastd_pid, SIGHUP)


def main():
	# Set up command line argument parsing
	parser = ArgumentParser()
	parser.add_argument(
		"key", nargs="?", type=str, help="public key of fastd peer to be verified")
	parser.add_argument(
		"-c", "--config", help="Specify custom configuration file", default="/etc/fastd/verify.cfg")
	args = parser.parse_args()

	# Startup checks
	if not path.isfile(args.config):
		print("error: configuration file not found!")
		return 1

	# read config file
	config.read(args.config)

	# Set up logging format and silence requests
	fileConfig(args.config)
	getLogger("requests").setLevel(WARNING)

	"""
	Try to read the peer's public key
	1. from the cmdline arguments
	2. from the fastd environment variable
	"""
	if args.key:
		key = args.key
	elif environ.get("PEER_KEY"):
		key = environ.get("PEER_KEY")
	else:
		print("error: no key given. aborting.")
		return 1

	# do the actual verification
	verified = verify(key)

	# maybe even write out a peer file for caching and failsafe purposes
	if config['default'].getboolean('writePeerfiles') and verified:
		create_peerfile(key)

	# peer was verified. return 0 to tell fast everything is fine
	if verified:
		return 0

	# oh no! something went wrong. tell fastd to deny the peer
	return 1


if __name__ == '__main__':
	returnCode = main()
	sys_exit(returnCode)
